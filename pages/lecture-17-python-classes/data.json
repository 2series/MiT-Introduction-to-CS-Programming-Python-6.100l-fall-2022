
{
  "title":"Lecture 17: Python Classes",
  "content":"Topics: Object Oriented Programming: data abstraction, class def, class instances, methods\nViewing videos requires an internet connection View video page Download video Download transcript Lecture Notes Lecture 17: Python Classes\nLecture 17 Code\nReadings Ch 10.1\nFinger Exercise Lecture 17 Write the class according to the specifications below:\nclass Circle(): def __init__(self, radius): \u0026#34;\u0026#34;\u0026#34; Initializes self with radius \u0026#34;\u0026#34;\u0026#34; # your code here def get_radius(self): \u0026#34;\u0026#34;\u0026#34; Returns the radius of self \u0026#34;\u0026#34;\u0026#34; # your code here def set_radius(self, radius): \u0026#34;\u0026#34;\u0026#34; radius is a number Changes the radius of self to radius \u0026#34;\u0026#34;\u0026#34; # your code here def get_area(self): \u0026#34;\u0026#34;\u0026#34; Returns the area of self using pi = 3.14 \u0026#34;\u0026#34;\u0026#34; # your code here def equal(self, c): \u0026#34;\u0026#34;\u0026#34; c is a Circle object Returns True if self and c have the same radius value \u0026#34;\u0026#34;\u0026#34; # your code here def bigger(self, c): \u0026#34;\u0026#34;\u0026#34; c is a Circle object Returns self or c, the Circle object with the bigger radius \u0026#34;\u0026#34;\u0026#34; # your code here 6.100L Finger Exercises Lecture 17 Solutions\n"}


